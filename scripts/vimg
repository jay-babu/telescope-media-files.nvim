#!/bin/bash

SCRIPT=`realpath $0`

readonly BASH_BINARY="$(which bash)"
declare -x PREVIEW_ID="preview"

declare -x TMP_FOLDER="/tmp/vimg"
mkdir -p $TMP_FOLDER

function calculate_size {
  if ! command -v bc &> /dev/null; then
    echo "the basic unix tool bc (basic calculator) could not be found in your path,\nplease install it to display media content"
    exit
  fi

  # grab vars
  max_width="${1}"
  max_height="${2}"
  img_width="${3}"
  img_height="${4}"
  img_stretch="${5}"

  # image width times a multiplier since in most terminals the line height is bigger than the mono-spaced character width
  stretched_width=$(echo "scale=20; ${img_width} * (${img_stretch} / 100)" | bc)

  width_ratio=$(echo "scale=20; ${max_width} / ${stretched_width}" | bc)
  height_ratio=$(echo "scale=20; ${max_height} / ${img_height}" | bc)
  both_ratios=("${width_ratio}" "${height_ratio}")
  best_ratio=$(printf "%.20f\n" "${both_ratios[@]}" | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n | head -n 1)

  new_width=$(echo "${stretched_width} * ${best_ratio}" | bc)
  new_height=$(echo "${img_height} * ${best_ratio}" | bc)
  echo "$(printf "%.0f" "$new_width") $(printf "%.0f" "$new_height")"
}

function render_at_size {
  if ! command -v identify &> /dev/null; then
    echo "identify (part of imagemagick) could not be found in your path,\nplease install it to display media content"
    exit
  fi

  max_width="${1}"
  max_height="${2}"
  img_path="${3}"
  img_stretch="${4}"

  # Requires imagemagick's identify command
  img_width=$(identify -format "%w" "${img_path}")
  img_height=$(identify -format "%h" "${img_path}")

  # Get dimensions from and push them into an array
  local raw_dimensions=$(calculate_size "${max_width}" "${max_height}" "${img_width}" "${img_height}" "${img_stretch}")
  dimensions=($raw_dimensions)
  new_width="${dimensions[0]}"
  new_height="${dimensions[1]}"

  # -s makes gifs static
  viu -b -s -w "${new_width}" -h "${new_height}" "${img_path}"
}

function draw_preview {
    if ! command -v viu &> /dev/null; then
      echo "VIU could not be found in your path,\nplease install it to display media content"
      exit
    fi

    if [[ "$1" == "imagepreview" ]]; then
      render_at_size "${5}" "${6}" "${2}" "${7}"
      # viu -b -w ${5} -h ${6} "${2}"

    elif [[ "$1" == "gifpreview" ]]; then
      # This is static for now, feel free to re-introduce FIFO to make
      # animations work again, plaing viu gifs (removing the -s flag) causes
      # the preview window to scroll weirdly
      render_at_size "${5}" "${6}" "${2}" "${7}"

    elif [[ "$1" == "videopreview" ]]; then
      if ! command -v viu &> /dev/null; then
        echo "ffmpegthumbnailer could not be found in your path,\nplease install it to display video previews"
        exit
      fi
      path="${2##*/}"
      echo -e "Loading preview..\nFile: $path"
      ffmpegthumbnailer -i "$2" -o "${TMP_FOLDER}/${path}.png" -s 0 -q 10
      clear
      render_at_size "${5}" "${6}" "${TMP_FOLDER}/${path}.png" "${7}"

    elif [[ "$1" == "pdfpreview" ]]; then
      path="${2##*/}"
        echo -e "Loading preview..\nFile: $path"
        [[ ! -f "${TMP_FOLDER}/${path}.png" ]] && pdftoppm -png -singlefile "$2" "${TMP_FOLDER}/${path}"
        clear
        render_at_size "${5}" "${6}" "${TMP_FOLDER}/${path}.png" "${7}"
    fi
}

function parse_options {
    extension="${1##*.}"
    case $extension in
    jpg | png | jpeg | webp)
        draw_preview  imagepreview "$1" $2 $3 $4 $5 $6
    ;;

    gif)
        draw_preview  gifpreview "$1" $2 $3 $4 $5 $6
    ;;

    avi | mp4 | wmv | dat | 3gp | ogv | mkv | mpg | mpeg | vob |  m2v | mov | webm | mts | m4v | rm  | qt | divx)
        draw_preview  videopreview "$1" $2 $3 $4 $5 $6
    ;;

    pdf | epub)
        draw_preview  pdfpreview "$1" $2 $3 $4 $5 $6
    ;;

    *)
    echo -n "unknown file $1"
    ;;
    esac
}

# trap finalise EXIT
# start_ueberzug
parse_options "${@}"
read
